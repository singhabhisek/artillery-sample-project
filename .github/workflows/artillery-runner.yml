name: Artillery Load Test (Multi-Runner)

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Choose test type (e.g., load/cleanup)"
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      runners_to_use:
        description: "Number of parallel runners to use (1‚Äì4)"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '4'
      scenario_file:
        description: "YAML file for Artillery test (e.g., cloudrun-loadtest.yml)"
        required: true
        default: "cloudrun-loadtest.yml"
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"

env:
  ARTILLERY_VERSION: "2.0.26"
  SCRIPTS_DIR: "./scripts"
  DATA_DIR: "./data"
  REPORT_DIR: "./artillery-results"

jobs:
  run-artillery:
    name: Run Artillery - Runner ${{ matrix.runner_index }}
    runs-on: ubuntu-latest

    # Strategy to allow 1‚Äì4 parallel runners
    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    steps:
      # ---------------------------------------------------------------
      # Step 0: Checkout repository so scripts folder is available
      # ---------------------------------------------------------------
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full repo to ensure all scripts are present

      # ---------------------------------------------------------------
      # Step 0.1: Skip unused runners gracefully
      # ---------------------------------------------------------------
      - name: üõë Skip unused runner jobs
        if: ${{ matrix.runner_index > fromJSON(github.event.inputs.runners_to_use) }}
        continue-on-error: true
        run: |
          echo "Skipping runner ${{ matrix.runner_index }} (limit = ${{ github.event.inputs.runners_to_use }})"
          exit 0

      # ---------------------------------------------------------------
      # Step 0.2: Check if the scenario YAML exists before proceeding
      # ---------------------------------------------------------------
      - name: üîç Check scenario YAML exists
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          if [ ! -f "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" ]; then
            echo "‚ùå Scenario file '${{ github.event.inputs.scenario_file }}' not found in scripts folder."
            exit 1
          else
            echo "‚úÖ Found scenario file: ${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}"
          fi

      # ---------------------------------------------------------------
      # Step 1: Setup Node.js (required for Artillery)
      # ---------------------------------------------------------------
      - name: üß© Setup Node.js
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # ---------------------------------------------------------------
      # Step 2: Install Artillery + plugin
      # ---------------------------------------------------------------
      - name: ‚öôÔ∏è Install Artillery + Plugin
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint
          artillery --version

      # ---------------------------------------------------------------
      # Step 3: Run Artillery test and generate result JSON
      # ---------------------------------------------------------------
      - name: üöÄ Run Artillery Test
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        id: run_test
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          TEST_NAME="test-${{ github.event.inputs.test_type }}"
          TIMESTAMP=$(date +%d%m%y)
          RANDOM_SUFFIX=$(head /dev/urandom | tr -dc a-z0-9 | head -c 6)
          RESULT_JSON="${TEST_NAME}-${TIMESTAMP}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}.json"
          RESULT_HTML="${TEST_NAME}-${TIMESTAMP}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}-full.html"

          echo "üß™ Running test: $RESULT_JSON"

          # Run Artillery with environment variables from secrets
          ARTILLERY_TARGET="${{ vars.ARTILLERY_TARGET }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          npx artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
          --output "${{ env.REPORT_DIR }}/$RESULT_JSON" --quiet

          npx artillery report "${{ env.REPORT_DIR }}/$RESULT_JSON" --output "${{ env.REPORT_DIR }}/$RESULT_HTML"

          echo "result_json=$RESULT_JSON" >> $GITHUB_OUTPUT
          echo "result_html=$RESULT_HTML" >> $GITHUB_OUTPUT

      # ---------------------------------------------------------------
      # Step 4: Package results (JSON + logs) into ZIP per runner
      # ---------------------------------------------------------------
      - name: üì¶ Package Artillery Results
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          ZIP_NAME="runner-${{ matrix.runner_index }}-results.zip"
          mkdir -p upload
          zip -r "upload/$ZIP_NAME" "${{ env.REPORT_DIR }}/$RESULT_JSON" "${{ env.REPORT_DIR }}/logs" || true
          echo "Packaged ZIP: upload/$ZIP_NAME"

      # ---------------------------------------------------------------
      # Step 5: Upload runner ZIP artifact
      # ---------------------------------------------------------------
      - name: üì§ Upload Artillery Results
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        uses: actions/upload-artifact@v4
        with:
          name: artillery-results-runner-${{ matrix.runner_index }}
          path: upload/*.zip
        continue-on-error: true  # ensure upload attempts even if test partially failed

  # =========================================================
  # Aggregate reports (runs after all runners complete)
  # =========================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type != 'cleanup' }}
    needs: run-artillery
    runs-on: ubuntu-latest

    steps:
      # ---------------------------------------------------------------
      # Step 1: Download all runner artifacts
      # ---------------------------------------------------------------
      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artillery-results

      # ---------------------------------------------------------------
      # Step 2: Extract ZIPs into combined-results folder
      # ---------------------------------------------------------------
      - name: üß© Extract ZIPs
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in artillery-results/**/*.zip; do
            [ -f "$zipfile" ] || continue
            foldername=$(basename "$zipfile" .zip)
            mkdir -p combined-results/"$foldername"
            unzip -o "$zipfile" -d combined-results/"$foldername" > /dev/null
          done
          echo "‚úÖ Extracted all runner ZIPs into unique subfolders."

      # ---------------------------------------------------------------
      # Step 3: Collect all result JSON filenames (comma-separated)
      # ---------------------------------------------------------------
      - name: üìù Collect JSON filenames
        id: collect_jsons
        shell: bash
        run: |
          JSON_FILES=$(find combined-results -name '*.json' -type f | xargs -n1 basename | paste -sd "," -)
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
          echo "‚úÖ Collected JSON files: $JSON_FILES"

      # ---------------------------------------------------------------
      # Step 4: Setup Python for dashboard generation
      # ---------------------------------------------------------------
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---------------------------------------------------------------
      # Step 5: Install Python dependencies
      # ---------------------------------------------------------------
      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # ---------------------------------------------------------------
      # Step 6: Generate merged HTML dashboard using Python
      # ---------------------------------------------------------------
      - name: üßÆ Generate Combined Dashboard
        shell: bash
        run: |
          SCENARIO_FILE="${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}"
          python generate_artillery_dashboard.py \
            --json "${{ steps.collect_jsons.outputs.json_files }}" \
            --yaml "$SCENARIO_FILE" \
            --output "merged-dashboard.html"
          echo "‚úÖ Merged dashboard generated: merged-dashboard.html"

      # ---------------------------------------------------------------
      # Step 7: Upload merged dashboard
      # ---------------------------------------------------------------
      - name: üì§ Upload Combined Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: merged-artillery-dashboard
          path: merged-dashboard.html
