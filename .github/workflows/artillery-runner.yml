# =====================================================================
# üß™ GitHub Actions Workflow: Artillery Load/Stress Test Runner
# =====================================================================
# üí° Purpose:
#    Automates running Artillery performance tests in GitHub Actions.
#    Supports environment selection (beta/gamma), test types (load/stress/cleanup),
#    report generation, artifact upload, and cleanup of old test results.
# =====================================================================

name: üß® Run Artillery Tests  # Workflow name shown in GitHub Actions UI

# ---------------------------------------------------------------------
# Trigger section: "workflow_dispatch" enables manual runs from GitHub UI
# ---------------------------------------------------------------------
on:
  workflow_dispatch:
    inputs:  # Custom user inputs shown when manually running the workflow
      environment:
        description: "Choose target environment"  # beta or gamma backend URL
        required: true
        type: choice
        options:
          - beta
          - gamma
      test_type:
        description: "Choose the test type"  # Select which mode to run
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      script_file:
        description: "Enter YAML filename from 'scripts/' folder (e.g., login-test.yml)"
        required: false
        default: "login-test.yml"
      test_name:
        description: "Optional: Provide a custom name for this test run"
        required: false
      cleanup_days:
        description: "Optional: Delete reports older than this many days"
        required: false
        default: "7"

# ---------------------------------------------------------------------
# Environment variables ‚Äî globally available for all steps
# ---------------------------------------------------------------------
env:
  ARTILLERY_VERSION: "2.0.21"    # Artillery CLI version to install
  SCRIPTS_DIR: "./scripts"       # Directory containing Artillery YAML test scripts
  DATA_DIR: "./data"             # Directory containing CSV or test data files
  REPORT_DIR: "./artillery-results"  # Directory where reports and logs will be saved

# ---------------------------------------------------------------------
# JOBS section ‚Äî defines what to run and on what system
# ---------------------------------------------------------------------
jobs:
  run-artillery:
    runs-on: ubuntu-latest  # Uses GitHub-hosted Ubuntu VM to execute steps

    steps:
      # ---------------------------------------------------------------
      # 1Ô∏è‚É£ Checkout code from the repository
      # ---------------------------------------------------------------
      - name: üì• Checkout repository
        uses: actions/checkout@v4  # Downloads your repo so tests can run on it

      # ---------------------------------------------------------------
      # 2Ô∏è‚É£ Setup Node.js (required by Artillery)
      # ---------------------------------------------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"  # Artillery supports Node.js 16+ (18 is stable LTS)

      # ---------------------------------------------------------------
      # 3Ô∏è‚É£ Install Artillery CLI globally
      # ---------------------------------------------------------------
      - name: üì¶ Install Artillery CLI
        run: |
          # Installs a fixed version of Artillery (to avoid breaking changes)
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}

      # ---------------------------------------------------------------
      # 4Ô∏è‚É£ Determine base URL depending on chosen environment
      # ---------------------------------------------------------------
      - name: üåê Determine target URL
        id: env_url
        run: |
          # Use the GitHub "vars" feature (in repo settings) to store URLs securely
          # Choose correct backend base URL depending on selected environment
          if [ "${{ github.event.inputs.environment }}" = "beta" ]; then
            echo "base_url=${{ vars.BETA_URL }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.environment }}" = "gamma" ]; then
            echo "base_url=${{ vars.GAMMA_URL }}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Invalid environment selected"; exit 1;
          fi

      # ---------------------------------------------------------------
      # 5Ô∏è‚É£ Handle cleanup ‚Äî delete old reports if cleanup is selected
      # ---------------------------------------------------------------
      - name: üßπ Cleanup old artifacts
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: |
          echo "üß∫ Cleaning up reports older than ${{ github.event.inputs.cleanup_days }} days..."
          # Finds and deletes JSON/HTML/ZIP older than X days
          find "${{ env.REPORT_DIR }}" -type f -mtime +${{ github.event.inputs.cleanup_days }} -print -delete || true
          echo "‚úÖ Cleanup completed."
        shell: bash

      # ---------------------------------------------------------------
      # 6Ô∏è‚É£ Skip test execution if cleanup mode was chosen
      # ---------------------------------------------------------------
      - name: üí§ Skip execution for cleanup
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: echo "Cleanup done. Skipping Artillery execution."
        shell: bash

      # ---------------------------------------------------------------
      # 7Ô∏è‚É£ Define test name ‚Äî either user-provided or generated automatically
      # ---------------------------------------------------------------
      - name: üè∑Ô∏è Define Test Name
        id: set_name
        run: |
          DATE=$(date +'%d%m%y')  # Generate short date stamp like 131025
          if [ -n "${{ github.event.inputs.test_name }}" ]; then
            NAME="${{ github.event.inputs.test_name }}"  # Use custom name if provided
          else
            BASE=$(basename "${{ github.event.inputs.script_file }}" .yml)
            NAME="test-${BASE}-${DATE}"  # e.g. test-login-test-131025
          fi
          echo "test_name=$NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Using test name: $NAME"

      # ---------------------------------------------------------------
      # 8Ô∏è‚É£ Execute Artillery test (for load/stress runs only)
      # ---------------------------------------------------------------
      - name: üöÄ Run Artillery Test
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          # Create results folder if not already present
          mkdir -p "${{ env.REPORT_DIR }}"
          REPORT_JSON="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json"
          REPORT_HTML="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html"

          echo "‚ñ∂Ô∏è Running Artillery test using script: ${{ github.event.inputs.script_file }}"
          echo "üåç Target URL: ${{ steps.env_url.outputs.base_url }}"

          # The ARTILLERY_TARGET env variable is passed into YAML config
          ARTILLERY_TARGET="${{ steps.env_url.outputs.base_url }}" \
          artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
            --output "$REPORT_JSON"

          # Generate a human-readable HTML report from JSON output
          artillery report "$REPORT_JSON" --output "$REPORT_HTML"

      # ---------------------------------------------------------------
      # 9Ô∏è‚É£ Zip together YAML script, JSON, and HTML reports
      # ---------------------------------------------------------------
      - name: üì¶ Package results
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          ZIP_FILE="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"
          # Zip script and output files into a single downloadable artifact
          zip -j "$ZIP_FILE" \
            "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html"
          echo "‚úÖ Packaged report as ZIP: $ZIP_FILE"

      # ---------------------------------------------------------------
      # üîü Upload the ZIP artifact so it's accessible from GitHub UI
      # ---------------------------------------------------------------
      - name: üì§ Upload Artillery Reports
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.set_name.outputs.test_name }}"  # Artifact name in Actions tab
          path: "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"  # Actual ZIP path
