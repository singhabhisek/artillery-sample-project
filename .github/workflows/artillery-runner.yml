# =====================================================================
# üß™ GitHub Actions Workflow: Artillery Load/Stress Test Runner
# =====================================================================
# üí° Purpose:
#    Automates Artillery performance tests inside GitHub Actions.
#    Supports selectable environments (beta/gamma) & auto-pulls
#    BASE_URL, API_KEY, and AUTH_HEADER from GitHub Environment Secrets.
# =====================================================================

name: üß® Run Artillery Tests

# ---------------------------------------------------------------------
# Manual trigger allows running this workflow from GitHub Actions UI
# ---------------------------------------------------------------------
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose target environment (beta or gamma)"
        required: true
        type: choice
        options:
          - beta
          - gamma
      test_type:
        description: "Choose test type (load, stress, cleanup)"
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      script_file:
        description: "YAML file from 'scripts/' folder (e.g. login-test.yml)"
        required: false
        default: "login-test.yml"
      test_name:
        description: "Optional custom name for test run"
        required: false
      cleanup_days:
        description: "Delete reports older than X days (for cleanup mode)"
        required: false
        default: "7"

# ---------------------------------------------------------------------
# Default environment variables (applies to all jobs)
# ---------------------------------------------------------------------
env:
  ARTILLERY_VERSION: "2.0.21"
  SCRIPTS_DIR: "./scripts"
  DATA_DIR: "./data"
  REPORT_DIR: "./artillery-results"

# ---------------------------------------------------------------------
# Main job definition
# ---------------------------------------------------------------------
jobs:
  run-artillery:
    runs-on: ubuntu-latest

    # üîê This ties the job to the selected GitHub Environment.
    # GitHub automatically injects environment vars & secrets.
    environment: ${{ github.event.inputs.environment }}

    steps:
      # ---------------------------------------------------------------
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # ---------------------------------------------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # ---------------------------------------------------------------
      - name: üì¶ Install Artillery CLI
        run: npm install -g artillery@${{ env.ARTILLERY_VERSION }}

      # ---------------------------------------------------------------
      - name: üè∑Ô∏è Define Test Name
        id: set_name
        run: |
          DATE=$(date +'%d%m%y')
          if [ -n "${{ github.event.inputs.test_name }}" ]; then
            NAME="${{ github.event.inputs.test_name }}"
          else
            BASE=$(basename "${{ github.event.inputs.script_file }}" .yml)
            NAME="test-${BASE}-${DATE}"
          fi
          echo "test_name=$NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Test Name: $NAME"

      # ---------------------------------------------------------------
      - name: üßπ Cleanup Old Reports
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: |
          echo "üß∫ Deleting reports older than ${{ github.event.inputs.cleanup_days }} days..."
          find "${{ env.REPORT_DIR }}" -type f -mtime +${{ github.event.inputs.cleanup_days }} -print -delete || true
          echo "‚úÖ Cleanup complete."

      # ---------------------------------------------------------------
      - name: üí§ Skip Execution in Cleanup Mode
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: echo "Cleanup done. Skipping Artillery execution."

      # ---------------------------------------------------------------
      - name: üöÄ Run Artillery Test
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          REPORT_JSON="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json"
          REPORT_HTML="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html"

          echo "‚ñ∂Ô∏è Running Artillery test script: ${{ github.event.inputs.script_file }}"
          echo "üåç Target URL: ${{ vars.BASE_URL }}"  # Pulled from GitHub Environment Variable

          # Environment variables passed to Artillery for substitution
          ARTILLERY_TARGET="${{ vars.BASE_URL }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
            --output "$REPORT_JSON"

          # Generate HTML report
          artillery report "$REPORT_JSON" --output "$REPORT_HTML"

      # ---------------------------------------------------------------
      - name: üì¶ Package Results
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          ZIP_FILE="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"
          zip -j "$ZIP_FILE" \
            "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html"
          echo "‚úÖ Packaged results: $ZIP_FILE"

      # ---------------------------------------------------------------
      - name: üì§ Upload Artifact
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.set_name.outputs.test_name }}"
          path: "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"
