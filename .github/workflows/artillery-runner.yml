name: Artillery Load Test (Multi-Runner)

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Choose test type (e.g., load/cleanup)"
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      runners_to_use:
        description: "Number of parallel runners to use (1â€“4)"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '4'
      scenario_file:
        description: "YAML file for Artillery test (e.g., cloudrun-loadtest.yml)"
        required: true
        default: "cloudrun-loadtest.yml"
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"
      debug_machine:
        description: "Print runner machine details (CPU, memory, IP, location)"
        required: false
        type: boolean
        default: false

env:
  ARTILLERY_VERSION: "2.0.26"
  SCRIPTS_DIR: "./scripts"
  DATA_DIR: "./data"
  REPORT_DIR: "./artillery-results"

jobs:
  # =========================================================
  # Run Artillery on Multiple Runners
  # =========================================================
  run-artillery:
    name: Run Artillery - Runner ${{ matrix.runner_index }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    steps:
      # ---------------------------------------------------------------
      # Step 0: Checkout repository
      # ---------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------------------------------------------------------------
      # Step 0.1: Optional machine debug info
      # ---------------------------------------------------------------
      - name: Print Machine Details
        if: ${{ github.event.inputs.debug_machine == 'true' }}
        shell: bash
        run: |
          echo "===== GitHub Actions Runner Machine Info ====="
          echo "Current Directory: $(pwd)"
          echo "OS Info:"
          lsb_release -a || cat /etc/os-release
          echo "CPU Info:"
          lscpu
          echo "Memory Info:"
          free -h
          echo "Disk Usage:"
          df -h
          echo "Public IP:"
          curl -s https://api.ipify.org
          echo "Approximate Location (IP-based):"
          curl -s https://ipinfo.io
          echo "=============================================="

      # ---------------------------------------------------------------
      # Step 0.2: Skip unused runners
      # ---------------------------------------------------------------
      - name: Skip unused runners
        if: ${{ matrix.runner_index > fromJSON(github.event.inputs.runners_to_use) }}
        continue-on-error: true
        run: |
          echo "Skipping runner ${{ matrix.runner_index }} (limit = ${{ github.event.inputs.runners_to_use }})"
          exit 0

      # ---------------------------------------------------------------
      # Step 0.3: Validate scenario YAML exists
      # ---------------------------------------------------------------
      - name: Check scenario YAML exists
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          if [ ! -f "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" ]; then
            echo "Scenario file '${{ github.event.inputs.scenario_file }}' not found."
            exit 1
          else
            echo "Found scenario file: ${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}"
          fi

      # ---------------------------------------------------------------
      # Step 1: Setup Node.js
      # ---------------------------------------------------------------
      - name: Setup Node.js
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # ---------------------------------------------------------------
      # Step 2: Install Artillery + plugin
      # ---------------------------------------------------------------
      - name: Install Artillery + Plugin
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint
          artillery --version

      # ---------------------------------------------------------------
      # Step 3: Run Artillery test and generate JSON + HTML
      # ---------------------------------------------------------------
      - name: Run Artillery Test
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        id: run_test
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          TEST_NAME="test-${{ github.event.inputs.test_type }}"
          TIMESTAMP=$(date +%d%m%y)
          RANDOM_SUFFIX=$(head /dev/urandom | tr -dc a-z0-9 | head -c 6)
          RESULT_JSON="${TEST_NAME}-${TIMESTAMP}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}.json"
          RESULT_HTML="${TEST_NAME}-${TIMESTAMP}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}-full.html"

          echo "Running test: $RESULT_JSON"

          ARTILLERY_TARGET="${{ vars.BASE_URL }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          npx artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
          --output "${{ env.REPORT_DIR }}/$RESULT_JSON" --quiet

          npx artillery report "${{ env.REPORT_DIR }}/$RESULT_JSON" --output "${{ env.REPORT_DIR }}/$RESULT_HTML"

          echo "result_json=$RESULT_JSON" >> $GITHUB_OUTPUT
          echo "result_html=$RESULT_HTML" >> $GITHUB_OUTPUT

      # ---------------------------------------------------------------
      # Step 4: Package results (JSON + logs) into ZIP
      # ---------------------------------------------------------------
      - name: Package Artillery Results
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          ZIP_NAME="runner-${{ matrix.runner_index }}-results.zip"
          mkdir -p upload
          zip -r "upload/$ZIP_NAME" "${{ env.REPORT_DIR }}/$RESULT_JSON" "${{ env.REPORT_DIR }}/logs" || true
          echo "Packaged ZIP: upload/$ZIP_NAME"

      # ---------------------------------------------------------------
      # Step 5: Upload runner ZIP artifact
      # ---------------------------------------------------------------
      - name: Upload Artillery Results
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        uses: actions/upload-artifact@v4
        with:
          name: artillery-results-runner-${{ matrix.runner_index }}
          path: upload/*.zip
        continue-on-error: true

  # =========================================================
  # Aggregate Reports and Generate Consolidated Dashboard
  # =========================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type != 'cleanup' }}
    needs: run-artillery
    runs-on: ubuntu-latest

    steps:
      # Step 0: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 1: Debug workspace and scripts
      - name: Debug Workspace & Scripts
        shell: bash
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in workspace:"
          ls -R
          echo "Scripts folder:"
          ls -R ./scripts || echo "Scripts folder missing"
          if [ -f "${GITHUB_WORKSPACE}/generate_artillery_dashboard.py" ]; then
            echo "Python script exists"
          else
            echo "Python script missing"
          fi

      # Step 2: Download all runner artifacts
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artillery-results

      # Step 3: Extract runner ZIPs
      - name: Extract ZIPs
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in artillery-results/**/*.zip; do
            [ -f "$zipfile" ] || continue
            foldername=$(basename "$zipfile" .zip)
            mkdir -p combined-results/"$foldername"
            unzip -o "$zipfile" -d combined-results/"$foldername"
          done

      # Step 4: Collect all runner JSONs (full paths)
      - name: Collect JSON files
        id: collect_jsons
        shell: bash
        run: |
          JSON_FILES=$(find combined-results -name '*.json' -type f | paste -sd "," -)
          if [ -z "$JSON_FILES" ]; then
            echo "No JSON files found"
            echo "json_files=" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
          echo "JSON files collected:"
          echo "$JSON_FILES" | tr ',' '\n'

      # Step 5: Setup Python
      - name: Setup Python
        if: ${{ steps.collect_jsons.outputs.json_files != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Step 6: Install Python dependencies
      - name: Install Python Dependencies
        if: ${{ steps.collect_jsons.outputs.json_files != '' }}
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # Step 7: Generate Combined Dashboard HTML
      - name: Generate Combined Dashboard
        if: ${{ steps.collect_jsons.outputs.json_files != '' }}
        shell: bash
        run: |
          SCENARIO_FILE="${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}"
          python "${GITHUB_WORKSPACE}/generate_artillery_dashboard.py" \
            --json "${{ steps.collect_jsons.outputs.json_files }}" \
            --yaml "$SCENARIO_FILE" \
            --output "merged-dashboard.html"

      # Step 8: Create consolidated ZIP (all runner zips + merged HTML)
      - name: Create Consolidated ZIP
        if: ${{ steps.collect_jsons.outputs.json_files != '' }}
        shell: bash
        run: |
          mkdir -p consolidated
          cp merged-dashboard.html consolidated/
          cp artillery-results/**/*.zip consolidated/ || true
          zip -r consolidated-results.zip consolidated/
          echo "Created consolidated ZIP: consolidated-results.zip"

      # Step 9: Upload final artifacts
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-artillery-report
          path:
            - consolidated-results.zip
            - merged-dashboard.html
            - artillery-results/**/*.zip
