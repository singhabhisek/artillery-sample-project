name: Artillery CloudRun Load Test

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Choose test type (load, stress, cleanup)"
        required: true
        default: "load"
      environment:
        description: "Target environment name"
        required: true
        default: "staging"
      runners_to_use:
        description: "Number of runners to use (1‚Äì4)"
        required: true
        default: "1"

jobs:
  # ==========================================================
  # JOB 1: Run Artillery Load Tests
  # ==========================================================
  run-artillery:
    name: "Run Artillery Test - Runner ${{ matrix.runner_index }}"
    # Use fixed matrix [1,2,3,4] ‚Äî skip unused ones dynamically
    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # ---------------------------------------------------------------
      # Step 0: Skip this runner if not requested
      # ---------------------------------------------------------------
      - name: üõë Skip unused runner jobs
        if: ${{ matrix.runner_index > fromJson(github.event.inputs.runners_to_use) }}
        continue-on-error: true
        run: |
          echo "Skipping runner ${{ matrix.runner_index }} (limit = ${{ github.event.inputs.runners_to_use }})"
          exit 0

      # ---------------------------------------------------------------
      # Step 1: Print system details for visibility
      # ---------------------------------------------------------------
      - name: ‚ÑπÔ∏è Runner System Info
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          echo "================== RUNNER DETAILS =================="
          echo "Runner index: ${{ matrix.runner_index }} / ${{ github.event.inputs.runners_to_use }}"
          echo "OS: ${{ runner.os }} (${{ runner.arch }})"
          echo "Kernel: $(uname -sro)"
          echo "CPU cores: $(nproc)"
          MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          MEM_GB=$(printf "%.2f" "$(echo "$MEM_KB / 1024 / 1024" | bc -l)")
          echo "Memory: ${MEM_GB} GB"
          echo "Public IP: $(curl -s api.ipify.org)"
          echo "===================================================="

      # ---------------------------------------------------------------
      # Step 2: Checkout repository
      # ---------------------------------------------------------------
      - name: üì• Checkout Repository
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        uses: actions/checkout@v4

      # ---------------------------------------------------------------
      # Step 3: Setup Node.js (for Artillery)
      # ---------------------------------------------------------------
      - name: üß© Setup Node.js
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # ---------------------------------------------------------------
      # Step 4: Install Artillery
      # ---------------------------------------------------------------
      - name: ‚öôÔ∏è Install Artillery
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        run: |
          npm install -g artillery@2.0.26
          artillery version

      # ---------------------------------------------------------------
      # Step 5: Run Artillery Load Test
      # ---------------------------------------------------------------
      - name: üöÄ Run Artillery Test
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          mkdir -p artillery-results
          RUN_ID="test-${{ github.event.inputs.environment }}-${{ github.run_number }}-runner-${{ matrix.runner_index }}"
          echo "‚ñ∂Ô∏è Running Artillery test for: ${RUN_ID}"

          # Add random suffix for unique JSON filename
          RAND_SUFFIX=$(head /dev/urandom | tr -dc a-z0-9 | head -c 6)
          JSON_FILE="${RUN_ID}-${RAND_SUFFIX}.json"
          HTML_FILE="${RUN_ID}-${RAND_SUFFIX}-full.html"

          artillery run ./cloudrun-loadtest.yml \
            -o "artillery-results/${JSON_FILE}"

          # Generate HTML report using Artillery built-in reporter
          artillery report "artillery-results/${JSON_FILE}" \
            -o "artillery-results/${HTML_FILE}"

          # Zip the output for artifact upload
          cd artillery-results
          zip -r "${RUN_ID}.zip" ./*
          cd ..

          echo "‚úÖ Artillery test complete for runner-${{ matrix.runner_index }}"
          echo "‚úÖ Created ZIP: artillery-results/${RUN_ID}.zip"

      # ---------------------------------------------------------------
      # Step 6: Upload Artillery result artifact
      # ---------------------------------------------------------------
      - name: üì§ Upload Artillery Result ZIP
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        uses: actions/upload-artifact@v4
        with:
          name: "artillery-results-runner-${{ matrix.runner_index }}"
          path: artillery-results/*.zip

  # ==========================================================
  # JOB 2: Aggregate Results into Dashboard
  # ==========================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type != 'cleanup' }}
    needs: [run-artillery]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # ---------------------------------------------------------------
      # Step 1: Download all artifacts from all runners
      # ---------------------------------------------------------------
      - name: üì• Download All Runner Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artillery-results

      # ---------------------------------------------------------------
      # Step 2: Extract all ZIPs to separate subfolders
      # ---------------------------------------------------------------
      - name: üß© Extract ZIPs per runner safely
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in artillery-results/**/*.zip; do
            foldername=$(basename "$zipfile" .zip)
            mkdir -p combined-results/"$foldername"
            unzip -o "$zipfile" -d combined-results/"$foldername" > /dev/null
          done
          echo "‚úÖ All runner ZIPs extracted safely"

      # ---------------------------------------------------------------
      # Step 3: Collect all JSON filenames (comma-separated)
      # ---------------------------------------------------------------
      - name: üßæ Collect JSON file names
        id: collect_jsons
        shell: bash
        run: |
          JSON_FILES=""
          for file in combined-results/*/*.json; do
            JSON_FILES="$JSON_FILES,$(basename "$file")"
          done
          JSON_FILES="${JSON_FILES#,}"
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
          echo "‚úÖ JSON files to pass to Python: $JSON_FILES"

      # ---------------------------------------------------------------
      # Step 4: Setup Python environment
      # ---------------------------------------------------------------
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---------------------------------------------------------------
      # Step 5: Install Python dependencies
      # ---------------------------------------------------------------
      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # ---------------------------------------------------------------
      # Step 6: Run Python Dashboard Generator
      # ---------------------------------------------------------------
      - name: üßÆ Generate Consolidated Dashboard
        shell: bash
        run: |
          # Copy YAML config (use first runner‚Äôs file)
          cp combined-results/*/*.yml config.yml

          # Run the Python script with comma-separated JSONs
          python ../generate_artillery_dashboard.py \
            --json "${{ steps.collect_jsons.outputs.json_files }}" \
            --yaml config.yml \
            --output "../merged-dashboard.html"

          echo "‚úÖ Merged dashboard generated successfully."

      # ---------------------------------------------------------------
      # Step 7: Upload Combined Dashboard Artifact
      # ---------------------------------------------------------------
      - name: üì§ Upload Merged Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: merged-artillery-dashboard
          path: merged-dashboard.html
