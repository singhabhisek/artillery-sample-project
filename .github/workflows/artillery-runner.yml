name: Artillery Load Test (Multi-Runner)

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Choose test type (e.g., load/cleanup)"
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      runners_to_use:
        description: "Number of parallel runners to use (1–4)"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '4'
      scenario_file:
        description: "YAML file for Artillery test (e.g., cloudrun-loadtest.yml)"
        required: true
        default: "cloudrun-loadtest.yml"
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"
      print_machine_info:
        description: "Set true to print machine details"
        required: false
        default: "false"

env:
  ARTILLERY_VERSION: "2.0.26"
  SCRIPTS_DIR: "./scripts"
  DATA_DIR: "./data"
  REPORT_DIR: "./artillery-results"

jobs:

  # =========================================================
  # 1️⃣ Run Artillery on Multiple Runners
  # =========================================================
  run-artillery:
    name: Run Artillery - Runner ${{ matrix.runner_index }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runner_index: [1,2,3,4]

    steps:
      # -----------------------------
      # Step 0: Checkout repo
      # -----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------
      # Step 0.1: Optional machine info
      # -----------------------------
      - name: Print machine details
        if: ${{ github.event.inputs.print_machine_info == 'true' }}
        shell: bash
        run: |
          echo "===== Machine Info ====="
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "IP: $(curl -s ifconfig.me)"
          echo "Location info:"
          curl -s https://ipapi.co/json/
          echo "========================"

      # -----------------------------
      # Step 0.2: Skip unused runners
      # -----------------------------
      - name: Skip unused runner jobs
        if: ${{ matrix.runner_index > fromJSON(github.event.inputs.runners_to_use) }}
        continue-on-error: true
        run: |
          echo "Skipping runner ${{ matrix.runner_index }} (limit ${{ github.event.inputs.runners_to_use }})"
          exit 0

      # -----------------------------
      # Step 0.3: Check scenario YAML exists
      # -----------------------------
      - name: Check scenario YAML
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          if [ ! -f "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" ]; then
            echo "Scenario YAML not found: ${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}"
            exit 1
          fi

      # -----------------------------
      # Step 1: Setup Node.js
      # -----------------------------
      - name: Setup Node.js
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # -----------------------------
      # Step 2: Install Artillery and plugin
      # -----------------------------
      - name: Install Artillery
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint
          artillery --version

      # -----------------------------
      # Step 3: Run Artillery test and generate JSON + HTML
      # -----------------------------
      - name: Run Artillery Test
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        id: run_test
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          TEST_NAME="test-${{ github.event.inputs.test_type }}"
          TIMESTAMP=$(date +%d%m%y)
          RANDOM_SUFFIX=$(head /dev/urandom | tr -dc a-z0-9 | head -c 6)
          RESULT_JSON="${TEST_NAME}-${TIMESTAMP}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}.json"
          RESULT_HTML="${TEST_NAME}-${TIMESTAMP}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}-full.html"

          echo "Running test: $RESULT_JSON"

          ARTILLERY_TARGET="${{ vars.BASE_URL }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          npx artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
            --output "${{ env.REPORT_DIR }}/$RESULT_JSON" --quiet

          npx artillery report "${{ env.REPORT_DIR }}/$RESULT_JSON" --output "${{ env.REPORT_DIR }}/$RESULT_HTML"

          echo "result_json=$RESULT_JSON" >> $GITHUB_OUTPUT
          echo "result_html=$RESULT_HTML" >> $GITHUB_OUTPUT

      # -----------------------------
      # Step 4: Package runner results into ZIP
      # -----------------------------
      - name: Package runner results
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          ZIP_NAME="runner-${{ matrix.runner_index }}-results.zip"
          mkdir -p upload
          zip -r "upload/$ZIP_NAME" "${{ env.REPORT_DIR }}/$RESULT_JSON" "${{ env.REPORT_DIR }}/logs" || true
          echo "Packaged runner ZIP: upload/$ZIP_NAME"

      # -----------------------------
      # Step 5: Upload runner ZIP artifact
      # -----------------------------
      - name: Upload runner artifact
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        uses: actions/upload-artifact@v4
        with:
          name: artillery-results-runner-${{ matrix.runner_index }}
          path: upload/*.zip
        continue-on-error: true

  # =========================================================
  # 2️⃣ Aggregate reports (runs after all runners complete)
  # =========================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type != 'cleanup' }}
    needs: run-artillery
    runs-on: ubuntu-latest
    if: always()   # ensures this job runs even if runners fail/cancel

    steps:

      # Step 0: Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 1: Download all available runner artifacts
      - name: Download runner artifacts
        uses: actions/download-artifact@v4
        with:
          path: artillery-results

      # Step 2: Extract all runner ZIPs into unique folders
      - name: Extract runner ZIPs
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in artillery-results/**/*.zip; do
            [ -f "$zipfile" ] || continue
            foldername=$(basename "$zipfile" .zip)
            mkdir -p combined-results/"$foldername"
            unzip -o "$zipfile" -d combined-results/"$foldername" > /dev/null
          done

      # Step 3: Debug list of JSONs
      - name: List combined JSONs
        shell: bash
        run: |
          echo "Found JSON files:"
          find combined-results -name '*.json' -type f

      # Step 4: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Step 5: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # Step 6: Generate HTML for individual runner JSONs
      - name: Generate HTML reports per runner JSON
        shell: bash
        run: |
          for json_file in $(find combined-results -name '*.json'); do
            html_file="${json_file%.json}-report.html"
            echo "Processing $json_file -> $html_file"
            python "${GITHUB_WORKSPACE}/generate_artillery_dashboard.py" \
              --json "$json_file" \
              --yaml "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
              --output "$html_file"
          done

      # Step 7: Collect all JSONs for final merged report
      - name: Collect all JSON filenames
        id: collect_jsons
        shell: bash
        run: |
          ALL_JSON=$(find combined-results -name '*.json' -type f | paste -sd "," -)
          if [ -z "$ALL_JSON" ]; then
            echo "No JSON files found, skipping final merge."
            echo "json_files=" >> $GITHUB_OUTPUT
          else
            echo "json_files=$ALL_JSON" >> $GITHUB_OUTPUT

      # Step 8: Generate final merged dashboard
      - name: Generate final merged dashboard
        if: ${{ steps.collect_jsons.outputs.json_files != '' }}
        shell: bash
        run: |
          python "${GITHUB_WORKSPACE}/generate_artillery_dashboard.py" \
            --json "${{ steps.collect_jsons.outputs.json_files }}" \
            --yaml "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
            --output "merged-dashboard.html"

      # Step 9: Create consolidated ZIP with runner ZIPs + merged HTML
      - name: Create consolidated ZIP
        shell: bash
        run: |
          mkdir -p final-report
          # Copy runner ZIPs
          cp artillery-results/**/*.zip final-report/ 2>/dev/null || true
          # Copy merged dashboard
          [ -f merged-dashboard.html ] && cp merged-dashboard.html final-report/
          # Create ZIP
          zip -r consolidated-report.zip final-report
          echo "Created consolidated ZIP: consolidated-report.zip"

      # Step 10: Upload consolidated artifact
      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-artillery-report
          path: consolidated-report.zip
