# =====================================================================
# üß™ GitHub Actions Workflow: Artillery Load/Stress Test Runner
# =====================================================================
# üí° Purpose:
#   Automates Artillery performance tests inside GitHub Actions.
#   Supports selectable environments (test/gamma), test type (load/stress/cleanup),
#   and multiple concurrent runners.
#   Pulls BASE_URL, API_KEY, AUTH_HEADER from GitHub Environment Secrets.
#   Generates a rich HTML dashboard via Python from JSON results.
# =====================================================================

name: üß® Run Artillery Tests

# ---------------------------------------------------------------------
# Trigger: Manual workflow_dispatch with user-defined inputs
# ---------------------------------------------------------------------
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (test or gamma)"
        required: true
        type: choice
        options:
          - test
          - gamma
      test_type:
        description: "Type of test to run (load, stress, cleanup)"
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      script_file:
        description: "YAML file from 'scripts/' folder (e.g., login-test.yml)"
        required: false
        default: "cloudrun-loadtest.yml"
      test_name:
        description: "Optional custom name for test run"
        required: false
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"
      runners_to_use:
        description: "Number of concurrent runners (1‚Äì4) for matrix"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '4'

# ---------------------------------------------------------------------
# Default environment variables for all jobs
# ---------------------------------------------------------------------
env:
  ARTILLERY_VERSION: "2.0.26"
  SCRIPTS_DIR: "./scripts"
  DATA_DIR: "./data"
  REPORT_DIR: "./artillery-results"

# =====================================================================
# Job 1: Run Artillery Tests (per runner)
# =====================================================================
jobs:
  run-artillery:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    # -----------------------------------------------------------------
    # Matrix strategy: allows concurrent runners
    # Maximum 4 runners; unused runners are skipped dynamically
    # -----------------------------------------------------------------
    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    name: Runner ${{ matrix.runner_index }} of ${{ github.event.inputs.runners_to_use }}

    steps:
      # ---------------------------------------------------------------
      # Step 1: Skip unused runners if matrix index exceeds requested runners
      # ---------------------------------------------------------------
      - name: üõë Skip Unused Runners
        if: ${{ matrix.runner_index > fromJson(github.event.inputs.runners_to_use) }}
        run: |
          echo "Skipping runner index ${{ matrix.runner_index }} as it exceeds requested ${{ github.event.inputs.runners_to_use }}"
          exit 0

      # ---------------------------------------------------------------
      # Step 2: Display runner info (OS, CPU, memory, IP, location)
      # ---------------------------------------------------------------
      - name: ‚ÑπÔ∏è Print Runner Provisioning Details
        shell: bash
        run: |
          echo "=========================================================="
          echo "üî• GITHUB ACTIONS RUNNER VM DETAILS üî•"
          echo "MATRIX RUNNER INDEX: ${{ matrix.runner_index }} of ${{ github.event.inputs.runners_to_use }}"
          echo "----------------------------------------------------------"
          echo "VM/OS: ${{ runner.os }} (${{ runner.arch }})"
          echo "Kernel/OS Version: $(uname -sro)"
          echo "CPU Cores: $(nproc)"
          MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          MEM_GB=$(printf "%.2f" "$(echo "$MEM_KB / 1024 / 1024" | bc -l)")
          echo "Total Memory: ${MEM_GB} GB"
          PUBLIC_IP=$(curl -s api.ipify.org)
          LOCATION_INFO=$(curl -s http://ip-api.com/json/$PUBLIC_IP)
          CITY=$(echo "$LOCATION_INFO" | jq -r '.city')
          REGION=$(echo "$LOCATION_INFO" | jq -r '.regionName')
          COUNTRY=$(echo "$LOCATION_INFO" | jq -r '.country')
          echo "Public IP: $PUBLIC_IP"
          echo "Location: $CITY, $REGION, $COUNTRY"
          echo "=========================================================="

      # ---------------------------------------------------------------
      # Step 3: Checkout repository
      # ---------------------------------------------------------------
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # ---------------------------------------------------------------
      # Step 4: Setup Node.js and install Artillery CLI + plugin
      # ---------------------------------------------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: üì¶ Install Artillery CLI + Plugin
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint

      # ---------------------------------------------------------------
      # Step 5: Generate unique test name per runner
      # ---------------------------------------------------------------
      - name: üè∑Ô∏è Define Test Name
        id: set_name
        shell: bash
        run: |
          DATE=$(date +'%d%m%y')
          RUNNER_INDEX=${{ matrix.runner_index }}

          if [ -n "${{ github.event.inputs.test_name }}" ]; then
            BASE_NAME="${{ github.event.inputs.test_name }}"
          else
            SCRIPT_BASE=$(basename "${{ github.event.inputs.script_file }}" .yml)
            BASE_NAME="test-${SCRIPT_BASE}-${DATE}"
          fi

          NAME="${BASE_NAME}-runner-${RUNNER_INDEX}"
          echo "test_name=$NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Test Name: $NAME"

      # ---------------------------------------------------------------
      # Step 6: Cleanup old reports (only if cleanup mode)
      # ---------------------------------------------------------------
      - name: üßπ Cleanup Old Reports
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: |
          echo "Deleting reports older than ${{ github.event.inputs.cleanup_days }} days..."
          find "${{ env.REPORT_DIR }}" -type f -mtime +${{ github.event.inputs.cleanup_days }} -print -delete || true
          echo "‚úÖ Cleanup complete."

      - name: üí§ Skip Execution in Cleanup Mode
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: echo "Cleanup mode done. Skipping Artillery execution."

      # ---------------------------------------------------------------
      # Step 7: Run Artillery load/stress test
      # ---------------------------------------------------------------
      - name: üöÄ Run Artillery Test
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          REPORT_JSON="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json"
          REPORT_HTML="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html"

          echo "Running Artillery script: ${{ github.event.inputs.script_file }}"
          ARTILLERY_TARGET="${{ vars.BASE_URL }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          npx artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
          --output "$REPORT_JSON" --quiet

          npx artillery report "$REPORT_JSON" --output "$REPORT_HTML"

      # ---------------------------------------------------------------
      # Step 8: Setup Python for dashboard generation
      # ---------------------------------------------------------------
      - name: üêç Setup Python
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üì¶ Install Python Dependencies
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # ---------------------------------------------------------------
      # Step 9: Generate HTML dashboard (per runner)
      # ---------------------------------------------------------------
      - name: üßÆ Generate Full HTML Dashboard
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        shell: bash
        run: |
          cp "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" config.yml
          python generate_artillery_dashboard.py \
            --json "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json" \
            --yaml config.yml \
            --output "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}-full.html"

      # ---------------------------------------------------------------
      # Step 10: Package results into ZIP
      # ---------------------------------------------------------------
      - name: üì¶ Package Results
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        shell: bash
        run: |
          ZIP_FILE="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"
          zip -j "$ZIP_FILE" \
            "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}-full.html"
          echo "‚úÖ Packaged results: $ZIP_FILE"

      # ---------------------------------------------------------------
      # Step 11: Upload artifact
      # ---------------------------------------------------------------
      - name: üì§ Upload Artifact
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.set_name.outputs.test_name }}"
          path: "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"

# =====================================================================
# Job 2: Aggregate & Pass JSONs to Python Dashboard Generator
# =====================================================================
aggregate-reports:
  if: ${{ github.event.inputs.test_type != 'cleanup' }}
  needs: [run-artillery]
  runs-on: ubuntu-latest
  environment: ${{ github.event.inputs.environment }}

  steps:
    # ---------------------------------------------------------------
    # Step 1: Download all runner artifacts
    # ---------------------------------------------------------------
    - name: üì• Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artillery-results

    # ---------------------------------------------------------------
    # Step 2: Collect JSON filenames (comma-separated)
    # ---------------------------------------------------------------
    - name: üß© Collect All JSON Filenames
      id: collect_jsons
      shell: bash
      run: |
        mkdir -p combined-results
        find artillery-results -type f -name '*.zip' -exec unzip -o {} -d combined-results \;
        cd combined-results
        JSON_FILES=$(ls -1 *.json | tr '\n' ',' | sed 's/,$//')
        echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
        echo "‚úÖ JSON files to pass: $JSON_FILES"

    # ---------------------------------------------------------------
    # Step 3: Setup Python
    # ---------------------------------------------------------------
    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: üì¶ Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas pyyaml plotly numpy

    # ---------------------------------------------------------------
    # Step 4: Run Python dashboard generator with all JSONs
    # ---------------------------------------------------------------
    - name: üßÆ Generate Combined Dashboard
      shell: bash
      run: |
        cd combined-results
        python ../generate_artillery_dashboard.py \
          --json "${{ steps.collect_jsons.outputs.json_files }}" \
          --yaml "${{ github.event.inputs.script_file }}" \
          --output "../merged-dashboard.html"
        echo "‚úÖ Merged dashboard generated: merged-dashboard.html"
        cd ..

    # ---------------------------------------------------------------
    # Step 5: Upload merged dashboard as artifact
    # ---------------------------------------------------------------
    - name: üì§ Upload Combined Dashboard
      uses: actions/upload-artifact@v4
      with:
        name: merged-artillery-dashboard
        path: merged-dashboard.html
