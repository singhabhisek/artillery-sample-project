# =====================================================================
# üß™ GitHub Actions Workflow: Artillery Load/Stress Test Runner
# =====================================================================
name: üß® Run Artillery Tests

# ---------------------------------------------------------------------
# Manual trigger with user inputs
# ---------------------------------------------------------------------
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (test or gamma)"
        required: true
        type: choice
        options:
          - test
          - gamma
      test_type:
        description: "Type of test to run (load, stress, cleanup)"
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      script_file:
        description: "YAML file from 'scripts/' folder (e.g., login-test.yml)"
        required: false
        default: "cloudrun-loadtest.yml"
      test_name:
        description: "Optional custom name for test run"
        required: false
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"
      runners_to_use:
        description: "Number of concurrent runners (1‚Äì4) for matrix"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '4'

# ---------------------------------------------------------------------
# Default environment variables
# ---------------------------------------------------------------------
env:
  ARTILLERY_VERSION: "2.0.26"
  SCRIPTS_DIR: "./scripts"
  DATA_DIR: "./data"
  REPORT_DIR: "./artillery-results"

# =====================================================================
# Jobs
# =====================================================================
jobs:

  # ===================================================================
  # Job 1: Run Artillery Tests per Runner
  # ===================================================================
  run-artillery:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    # -----------------------------------------------------------------
    # Dynamic matrix based on user input
    # Only generates the requested number of runners
    # -----------------------------------------------------------------
    strategy:
      fail-fast: false
      matrix:
        runner_index: ${{ range(1, fromJson(github.event.inputs.runners_to_use) + 1) }}

    # Dynamic job name for clarity in UI
    name: Runner ${{ matrix.runner_index }} of ${{ github.event.inputs.runners_to_use }}

    steps:

      # ---------------------------------------------------------------
      # Step 1: Print runner details (OS, CPU, Memory, IP, location)
      # ---------------------------------------------------------------
      - name: ‚ÑπÔ∏è Print Runner Provisioning Details
        shell: bash
        run: |
          echo "=========================================================="
          echo "üî• GITHUB ACTIONS RUNNER VM DETAILS üî•"
          echo "MATRIX RUNNER INDEX: ${{ matrix.runner_index }} of ${{ github.event.inputs.runners_to_use }}"
          echo "VM/OS: ${{ runner.os }} (${{ runner.arch }})"
          echo "Kernel/OS Version: $(uname -sro)"
          echo "CPU Cores: $(nproc)"
          MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          MEM_GB=$(printf "%.2f" "$(echo "$MEM_KB / 1024 / 1024" | bc -l)")
          echo "Total Memory: ${MEM_GB} GB"
          PUBLIC_IP=$(curl -s api.ipify.org)
          LOCATION_INFO=$(curl -s http://ip-api.com/json/$PUBLIC_IP)
          CITY=$(echo "$LOCATION_INFO" | jq -r '.city')
          REGION=$(echo "$LOCATION_INFO" | jq -r '.regionName')
          COUNTRY=$(echo "$LOCATION_INFO" | jq -r '.country')
          echo "Public IP: $PUBLIC_IP"
          echo "Location: $CITY, $REGION, $COUNTRY"
          echo "=========================================================="

      # ---------------------------------------------------------------
      # Step 2: Checkout repository
      # ---------------------------------------------------------------
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # ---------------------------------------------------------------
      # Step 3: Setup Node.js and install Artillery CLI + plugin
      # ---------------------------------------------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: üì¶ Install Artillery CLI + Plugin
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint

      # ---------------------------------------------------------------
      # Step 4: Define unique test name per runner with random suffix
      # ---------------------------------------------------------------
      - name: üè∑Ô∏è Define Test Name
        id: set_name
        shell: bash
        run: |
          DATE=$(date +'%d%m%y')                           # Current date
          RANDOM_SUFFIX=$RANDOM                             # Random number for uniqueness
          RUNNER_INDEX=${{ matrix.runner_index }}
          if [ -n "${{ github.event.inputs.test_name }}" ]; then
            BASE_NAME="${{ github.event.inputs.test_name }}"
          else
            SCRIPT_BASE=$(basename "${{ github.event.inputs.script_file }}" .yml)
            BASE_NAME="test-${SCRIPT_BASE}-${DATE}"
          fi
          NAME="${BASE_NAME}-runner-${RUNNER_INDEX}-${RANDOM_SUFFIX}"
          echo "test_name=$NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Test Name: $NAME"

      # ---------------------------------------------------------------
      # Step 5: Cleanup old reports (only in cleanup mode)
      # ---------------------------------------------------------------
      - name: üßπ Cleanup Old Reports
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: |
          echo "Deleting reports older than ${{ github.event.inputs.cleanup_days }} days..."
          find "${{ env.REPORT_DIR }}" -type f -mtime +${{ github.event.inputs.cleanup_days }} -print -delete || true
          echo "‚úÖ Cleanup complete."

      # ---------------------------------------------------------------
      # Step 6: Skip execution if cleanup mode
      # ---------------------------------------------------------------
      - name: üí§ Skip Execution in Cleanup Mode
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: echo "Cleanup done. Skipping Artillery execution."

      # ---------------------------------------------------------------
      # Step 7: Run Artillery load/stress test
      # ---------------------------------------------------------------
      - name: üöÄ Run Artillery Test
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          REPORT_JSON="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json"
          REPORT_HTML="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html"
          echo "Running Artillery script: ${{ github.event.inputs.script_file }}"
          ARTILLERY_TARGET="${{ vars.BASE_URL }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          npx artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
          --output "$REPORT_JSON" --quiet
          npx artillery report "$REPORT_JSON" --output "$REPORT_HTML"

      # ---------------------------------------------------------------
      # Step 8: Setup Python for dashboard generation
      # ---------------------------------------------------------------
      - name: üêç Setup Python
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üì¶ Install Python Dependencies
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # ---------------------------------------------------------------
      # Step 9: Generate per-runner HTML dashboard
      # ---------------------------------------------------------------
      - name: üßÆ Generate Full HTML Dashboard
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        shell: bash
        run: |
          cp "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" config.yml
          python generate_artillery_dashboard.py \
            --json "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json" \
            --yaml config.yml \
            --output "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}-full.html"

      # ---------------------------------------------------------------
      # Step 10: Package results into ZIP
      # ---------------------------------------------------------------
      - name: üì¶ Package Results
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        shell: bash
        run: |
          ZIP_FILE="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"
          zip -j "$ZIP_FILE" \
            "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}-full.html"
          echo "‚úÖ Packaged results: $ZIP_FILE"

      # ---------------------------------------------------------------
      # Step 11: Upload per-runner artifact
      # ---------------------------------------------------------------
      - name: üì§ Upload Artifact
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.set_name.outputs.test_name }}"
          path: "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"

  # ===================================================================
  # Job 2: Aggregate JSONs & Generate Combined Dashboard
  # ===================================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type != 'cleanup' }}
    needs: [run-artillery]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:

      # ---------------------------------------------------------------
      # Step 1: Download all artifacts from runners
      # ---------------------------------------------------------------
      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artillery-results

      # ---------------------------------------------------------------
      # Step 2: Extract each ZIP into its own subfolder to avoid YAML overwrites
      # ---------------------------------------------------------------
      - name: üß© Extract ZIPs per runner
        id: extract
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in artillery-results/*.zip; do
            foldername=$(basename "$zipfile" .zip)   # Use ZIP name as folder
            mkdir -p combined-results/"$foldername"
            unzip -o "$zipfile" -d combined-results/"$foldername" > /dev/null
          done
          echo "‚úÖ All ZIPs extracted into separate folders"

      # ---------------------------------------------------------------
      # Step 3: Collect JSON filenames (unique per runner) for Python input
      # ---------------------------------------------------------------
      - name: üìù Collect JSON filenames for Python
        id: collect_jsons
        shell: bash
        run: |
          JSON_FILES=""
          for folder in combined-results/*; do
            json_file=$(ls "$folder"/*.json)          # Only one JSON per runner
            JSON_FILES="$JSON_FILES,$(basename "$json_file")"
          done
          JSON_FILES="${JSON_FILES#,}"                # Remove leading comma
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
          echo "‚úÖ JSON files to pass to Python: $JSON_FILES"

      # ---------------------------------------------------------------
      # Step 4: Setup Python
      # ---------------------------------------------------------------
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---------------------------------------------------------------
      # Step 5: Install Python dependencies
      # ---------------------------------------------------------------
      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # ---------------------------------------------------------------
      # Step 6: Run Python dashboard generator
      # ---------------------------------------------------------------
      - name: üßÆ Generate Combined Dashboard
        shell: bash
        run: |
          # Copy YAML from the first runner folder for Python
          cp combined-results/*/*.yml config.yml
          python ../generate_artillery_dashboard.py \
            --json "${{ steps.collect_jsons.outputs.json_files }}" \
            --yaml config.yml \
            --output "../merged-dashboard.html"
          echo "‚úÖ Merged dashboard generated: merged-dashboard.html"

      # ---------------------------------------------------------------
      # Step 7: Upload merged dashboard as artifact
      # ---------------------------------------------------------------
      - name: üì§ Upload Combined Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: merged-artillery-dashboard
          path: merged-dashboard.html
