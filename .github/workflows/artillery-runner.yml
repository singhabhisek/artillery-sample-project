# =====================================================================
# üß™ GitHub Actions Workflow: Artillery Load/Stress Test Runner
# =====================================================================
# üí° Purpose:
#   Automates Artillery performance tests inside GitHub Actions.
#   Supports selectable environments (test/gamma) & auto-pulls
#   BASE_URL, API_KEY, and AUTH_HEADER from GitHub Environment Secrets.
#   Additionally runs a Python dashboard generator to produce
#   a rich HTML analytics report.
# =====================================================================

name: üß® Run Artillery Tests

# ---------------------------------------------------------------------
# Manual trigger: allows running this workflow manually from GitHub UI.
# Provides configurable input parameters.
# ---------------------------------------------------------------------
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose target environment (test or gamma)"
        required: true
        type: choice
        options:
          - test
          - gamma
      test_type:
        description: "Choose test type (load, stress, cleanup)"
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      script_file:
        description: "YAML file from 'scripts/' folder (e.g. login-test.yml)"
        required: false
        default: "cloudrun-loadtest.yml"
      test_name:
        description: "Optional custom name for test run"
        required: false
      cleanup_days:
        description: "Delete reports older than X days (for cleanup mode)"
        required: false
        default: "7"
      runners_to_use:
        description: "Number of concurrent runners (VMs) for the test matrix."
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '4'

# ---------------------------------------------------------------------
# Default environment variables (applies to all jobs)
# ---------------------------------------------------------------------
env:
  ARTILLERY_VERSION: "2.0.26"
  SCRIPTS_DIR: "./scripts"
  DATA_DIR: "./data"
  REPORT_DIR: "./artillery-results"

# ---------------------------------------------------------------------
# Main Job: Executes Artillery across concurrent runners
# ---------------------------------------------------------------------
jobs:
  run-artillery:
    # ‚úÖ Skip unused runners cleanly if above requested count
    if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}

    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    name: Runner ${{ matrix.runner_index }} of ${{ github.event.inputs.runners_to_use }}

    steps:
      # ---------------------------------------------------------------
      # ‚ÑπÔ∏è Display information about the GitHub-hosted runner
      # ---------------------------------------------------------------
      - name: ‚ÑπÔ∏è Print Runner Provisioning Details
        shell: bash
        run: |
          echo "=========================================================="
          echo "üî• GITHUB ACTIONS RUNNER VM DETAILS (Artillery Test Host) üî•"
          echo "=========================================================="
          echo "MATRIX RUNNER INDEX: ${{ matrix.runner_index }} of ${{ github.event.inputs.runners_to_use }}"
          echo "----------------------------------------------------------"
          echo "VM/OS Provisioned: ${{ runner.os }} (${{ runner.arch }})"
          echo "Kernel/OS Version: $(uname -sro)"
          echo "----------------------------------------------------------"
          echo "Capacity:"
          echo "  CPU Cores: $(nproc)"
          MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          MEM_GB=$(printf "%.2f" "$(echo "$MEM_KB / 1024 / 1024" | bc -l)")
          echo "  Total Memory: ${MEM_GB} GB"
          echo "----------------------------------------------------------"
          echo "Network Details:"
          PUBLIC_IP=$(curl -s api.ipify.org)
          echo "  Public IP Used: $PUBLIC_IP"
          LOCATION_INFO=$(curl -s http://ip-api.com/json/$PUBLIC_IP)
          CITY=$(echo "$LOCATION_INFO" | jq -r '.city')
          REGION=$(echo "$LOCATION_INFO" | jq -r '.regionName')
          COUNTRY=$(echo "$LOCATION_INFO" | jq -r '.country')
          echo "  Approximate Location: $CITY, $REGION, $COUNTRY"
          echo "=========================================================="

      # ---------------------------------------------------------------
      # üì• Checkout code
      # ---------------------------------------------------------------
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # ---------------------------------------------------------------
      # ‚öôÔ∏è Setup Node.js and Install Artillery
      # ---------------------------------------------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: üì¶ Install Artillery CLI + Plugin
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint

      # ---------------------------------------------------------------
      # üè∑Ô∏è Generate unique test name for reports
      # ---------------------------------------------------------------
      - name: üè∑Ô∏è Define Test Name
        id: set_name
        shell: bash
        run: |
          DATE=$(date +'%d%m%y')
          RUNNER_INDEX=${{ matrix.runner_index }}

          if [ -n "${{ github.event.inputs.test_name }}" ]; then
            BASE_NAME="${{ github.event.inputs.test_name }}"
          else
            SCRIPT_BASE=$(basename "${{ github.event.inputs.script_file }}" .yml)
            BASE_NAME="test-${SCRIPT_BASE}-${DATE}"
          fi

          NAME="${BASE_NAME}-runner-${RUNNER_INDEX}"
          echo "test_name=$NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Test Name: $NAME"

      # ---------------------------------------------------------------
      # üßπ Cleanup mode (delete old reports)
      # ---------------------------------------------------------------
      - name: üßπ Cleanup Old Reports
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: |
          echo "üß∫ Deleting reports older than ${{ github.event.inputs.cleanup_days }} days..."
          find "${{ env.REPORT_DIR }}" -type f -mtime +${{ github.event.inputs.cleanup_days }} -print -delete || true
          echo "‚úÖ Cleanup complete."

      - name: üí§ Skip Execution in Cleanup Mode
        if: ${{ github.event.inputs.test_type == 'cleanup' }}
        run: echo "Cleanup done. Skipping Artillery execution."

      # ---------------------------------------------------------------
      # üöÄ Run Artillery test (for load/stress)
      # ---------------------------------------------------------------
      - name: üöÄ Run Artillery Test
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          REPORT_JSON="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json"
          REPORT_HTML="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html"

          echo "‚ñ∂Ô∏è Running Artillery test script: ${{ github.event.inputs.script_file }} (Runner ${{ matrix.runner_index }})"
          echo "üåç Target URL: ${{ vars.BASE_URL }}"

          ARTILLERY_TARGET="${{ vars.BASE_URL }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          npx artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
          --output "$REPORT_JSON" --quiet

          npx artillery report "$REPORT_JSON" --output "$REPORT_HTML"

      # ---------------------------------------------------------------
      # üêç Setup Python & Generate dashboard
      # ---------------------------------------------------------------
      - name: üêç Setup Python
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üì¶ Install Python Dependencies
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      - name: üßÆ Generate Full HTML Dashboard
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          echo "üìä Running custom Python report generator..."
          cp "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" config.yml
          python generate_artillery_dashboard.py
        env:
          INPUT_JSON: "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json"
          INPUT_YAML: "config.yml"
          OUTPUT_HTML: "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}-full.html"

      # ---------------------------------------------------------------
      # üì¶ Package & upload results
      # ---------------------------------------------------------------
      - name: üì¶ Package Results
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        run: |
          ZIP_FILE="${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"
          zip -j "$ZIP_FILE" \
            "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.script_file }}" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.json" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.html" \
            "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}-full.html"
          echo "‚úÖ Packaged results: $ZIP_FILE"

      - name: üì§ Upload Artifact
        if: ${{ github.event.inputs.test_type != 'cleanup' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.set_name.outputs.test_name }}"
          path: "${{ env.REPORT_DIR }}/${{ steps.set_name.outputs.test_name }}.zip"
