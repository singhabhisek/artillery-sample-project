name: Artillery Load Test (Multi-Runner)

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Choose test type (e.g., load/cleanup)"
        required: true
        type: choice
        options:
          - load
          - stress
          - cleanup
      environment:
        description: "Environment to run test on (dev/stage/prod)"
        required: true
        type: choice
        options:
          - test
          - prod
      runners_to_use:
        description: "Number of parallel runners to use (1‚Äì4)"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '4'
      scenario_file:
        description: "YAML file for Artillery test (e.g., cloudrun-loadtest.yml)"
        required: true
        default: "cloudrun-loadtest.yml"
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"


env:
  ARTILLERY_VERSION: "2.0.26"
  SCRIPTS_DIR: "./scripts"
  DATA_DIR: "./data"
  REPORT_DIR: "./artillery-results"
  
# =========================================================
# 1Ô∏è‚É£ Job: Run Artillery on Multiple Runners in Parallel
# =========================================================
jobs:
  run-artillery:
    name: Run Artillery - Runner ${{ matrix.runner_index }}
    runs-on: ubuntu-latest

    # Define up to 4 parallel runners (we will conditionally skip extras)
    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    steps:
      # ---------------------------------------------------------------
      # Step 0: Skip unused runners gracefully (green, not red ‚ùå)
      # ---------------------------------------------------------------
      - name: üõë Skip unused runner jobs
        if: ${{ matrix.runner_index > fromJson(github.event.inputs.runners_to_use) }}
        continue-on-error: true
        run: |
          echo "Skipping runner ${{ matrix.runner_index }} (limit = ${{ github.event.inputs.runners_to_use }})"
          exit 0

      # ---------------------------------------------------------------
      # Step 1: Print Runner Provisioning Details (system info)
      # ---------------------------------------------------------------
      - name: ‚ÑπÔ∏è Print Runner Provisioning Details
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          echo "================== RUNNER DETAILS =================="
          echo "Runner index: ${{ matrix.runner_index }} / ${{ github.event.inputs.runners_to_use }}"
          echo "OS: ${{ runner.os }} (${{ runner.arch }})"
          echo "Kernel: $(uname -sro)"
          echo "CPU cores: $(nproc)"
          MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          MEM_GB=$(printf "%.2f" "$(echo "$MEM_KB / 1024 / 1024" | bc -l)")
          echo "Memory: ${MEM_GB} GB"
          echo "Public IP: $(curl -s api.ipify.org)"
          CITY=$(echo "$LOCATION_INFO" | jq -r '.city')
          REGION=$(echo "$LOCATION_INFO" | jq -r '.regionName')
          COUNTRY=$(echo "$LOCATION_INFO" | jq -r '.country')
          echo "Public IP: $PUBLIC_IP"
          echo "Location: $CITY, $REGION, $COUNTRY"
          echo "===================================================="

      # ---------------------------------------------------------------
      # Step 2: Setup Node.js (needed for Artillery)
      # ---------------------------------------------------------------
      - name: üß© Setup Node.js
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # ---------------------------------------------------------------
      # Step 3: Install Artillery
      # ---------------------------------------------------------------
      - name: ‚öôÔ∏è Install Artillery + Plugin
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint
          artillery --version
      
      - name: üß™ Debug List workspace & scripts folder
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          echo "Working directory: $(pwd)"
          echo "All files in workspace:"
          ls -R .
          echo "Contents of ./scripts folder:"
          ls -R ./scripts || echo "scripts folder not found!"

      # ---------------------------------------------------------------
      # Step 4: Run the test and create unique JSON + HTML result names
      # ---------------------------------------------------------------
      - name: üöÄ Run Artillery Test
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        id: run_test
        shell: bash
        run: |
          mkdir -p artillery-results
          TEST_NAME="test-${{ github.event.inputs.test_type }}-${{ github.event.inputs.environment }}"
          TIMESTAMP=$(date +%d%m%y)
          RANDOM_SUFFIX=$(head /dev/urandom | tr -dc a-z0-9 | head -c 6)
          RESULT_JSON="${TEST_NAME}-${TIMESTAMP}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}.json"
          RESULT_HTML="${TEST_NAME}-${TIMESTAMP}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}-full.html"

          echo "üß™ Running test: ${RESULT_JSON}"
          ARTILLERY_TARGET="${{ vars.BASE_URL }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          npx artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
          --output "artillery-results/${RESULT_JSON}" --quiet
          npx artillery report "artillery-results/${RESULT_JSON}" --output "artillery-results/$REPORT_HTML"
          
          echo "result_json=${RESULT_JSON}" >> $GITHUB_OUTPUT
          echo "result_html=${RESULT_HTML}" >> $GITHUB_OUTPUT

      # ---------------------------------------------------------------
      # Step 5: Package test results into a ZIP per runner
      # ---------------------------------------------------------------
      - name: üì¶ Package Artillery Results
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        run: |
          TEST_NAME="test-${{ github.event.inputs.test_type }}-${{ github.event.inputs.environment }}"
          ZIP_NAME="${TEST_NAME}-${{ matrix.runner_index }}.zip"
          mkdir -p upload
          zip -r "upload/${ZIP_NAME}" artillery-results/*${{ matrix.runner_index }}*.json artillery-results/*${{ matrix.runner_index }}*.html ${{ github.event.inputs.scenario_file }}
          echo "Packaged ZIP: upload/${ZIP_NAME}"

      # ---------------------------------------------------------------
      # Step 6: Upload the ZIP as an artifact
      # ---------------------------------------------------------------
      - name: üì§ Upload Artillery Results
        if: ${{ matrix.runner_index <= fromJson(github.event.inputs.runners_to_use) }}
        uses: actions/upload-artifact@v4
        with:
          name: artillery-results-runner-${{ matrix.runner_index }}
          path: upload/*.zip

# =========================================================
# 2Ô∏è‚É£ Job: Aggregate All Runner Reports (runs after all above)
# =========================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type != 'cleanup' }}
    needs: [run-artillery]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # ---------------------------------------------------------------
      # Step 1: Download all Artifacts
      # ---------------------------------------------------------------
      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artillery-results

      # ---------------------------------------------------------------
      # Step 2: Extract all ZIPs into separate folders (no overwrite)
      # ---------------------------------------------------------------
      - name: üß© Extract ZIPs per runner
        id: extract
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in artillery-results/**/*.zip; do
            foldername=$(basename "$zipfile" .zip)
            mkdir -p combined-results/"$foldername"
            unzip -o "$zipfile" -d combined-results/"$foldername" > /dev/null
          done
          echo "‚úÖ Extracted all runner ZIPs into unique subfolders."

      # ---------------------------------------------------------------
      # Step 3: Collect all JSON filenames for Python (comma-separated)
      # ---------------------------------------------------------------
      - name: üìù Collect JSON filenames for Python
        id: collect_jsons
        shell: bash
        run: |
          JSON_FILES=""
          for folder in combined-results/*; do
            json_file=$(ls "$folder"/*.json | head -n 1)
            if [ -n "$json_file" ]; then
              JSON_FILES="$JSON_FILES,$(basename "$json_file")"
            fi
          done
          JSON_FILES="${JSON_FILES#,}"
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
          echo "‚úÖ JSON files to pass: $JSON_FILES"

      # ---------------------------------------------------------------
      # Step 4: Setup Python
      # ---------------------------------------------------------------
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---------------------------------------------------------------
      # Step 5: Install Python dependencies
      # ---------------------------------------------------------------
      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # ---------------------------------------------------------------
      # Step 6: Run Python Dashboard Generator
      # ---------------------------------------------------------------
      - name: üßÆ Generate Combined Dashboard
        shell: bash
        run: |
          # Copy YAML file from first runner folder
          cp combined-results/*/*.yml config.yml

          # Call Python script with comma-separated JSONs
          python ../generate_artillery_dashboard.py \
            --json "${{ steps.collect_jsons.outputs.json_files }}" \
            --yaml config.yml \
            --output "../merged-dashboard.html"

          echo "‚úÖ Merged dashboard generated: merged-dashboard.html"

      # ---------------------------------------------------------------
      # Step 7: Upload Combined Dashboard
      # ---------------------------------------------------------------
      - name: üì§ Upload Combined Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: merged-artillery-dashboard
          path: merged-dashboard.html
