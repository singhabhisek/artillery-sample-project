# =========================================================
# GitHub Actions workflow for multi-runner JMeter tests
# =========================================================
# Features:
# 1. Multiple parallel runners (1‚Äì4)
# 2. Each runner generates JTL results, errors JTL, and HTML report
# 3. Plugin support: dummy sampler, custom thread groups, filter plugins
# 4. Optional system monitoring
# 5. Aggregation: merge all JTLs and generate consolidated HTML
# 6. Artifacts: per-runner zip + consolidated zip
# 7. Early JMX file validation (before installing JMeter)
# =========================================================

name: "JMeter Load Test (Multi-Runner)"  # Name of the workflow

# =========================================================
# Workflow trigger
# =========================================================
run-name: >
  JMeter Workflow: ${{ github.event.inputs.test_name }}

on:
  workflow_dispatch:  # Manual trigger
    inputs:  # Inputs for workflow_dispatch
      test_type:
        description: "Choose test type (e.g., load/cleanup)"
        required: true
        type: choice
        options:
          - load
          - cleanup
      runners_to_use:
        description: "Number of parallel runners to use (1‚Äì4)"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
      test_plan_file:
        description: "JMeter Test Plan (.jmx file)"
        required: true
        default: "High_TPS_Runner.jmx"
      test_name:
        description: "Optional test name; if blank, YYYYMMDD will be used"
        required: false
        default: ""
      run_name:
        description: "Optional custom run name; overrides test_name if provided"
        required: false
        default: ""
      monitor_system:
        description: "Monitor runner CPU/memory usage during test? true/false"
        required: false
        type: choice
        options:
          - "true"
          - "false"
        default: "false"
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"
      print_machine_info:
        description: "Set true to print machine details"
        required: false
        type: choice
        options:
          - "true"
          - "false"

# =========================================================
# Environment variables
# =========================================================
env:
  JMETER_VERSION: "5.6.3"             # JMeter version to install
  SCRIPTS_DIR: "./scripts"            # Directory where .jmx test plans exist
  REPORT_DIR: "./jmeter-results"      # Base directory to store runner results

# =========================================================
# Job 1: Set final test name
# =========================================================
jobs:
  set-test-name:
    runs-on: ubuntu-latest  # OS runner
    outputs:
      final_test_name: ${{ steps.determine.outputs.final_test_name }}  # Output for other jobs
    steps:
      - id: determine
        run: |
          TIMESTAMP=$(date +%Y%m%d)  # Current date as fallback
          # Determine final name based on inputs
          if [ -n "${{ github.event.inputs.run_name }}" ]; then
            FINAL_NAME="${{ github.event.inputs.run_name }}"
          elif [ -n "${{ github.event.inputs.test_name }}" ]; then
            FINAL_NAME="${{ github.event.inputs.test_name }}"
          else
            FINAL_NAME="test-$TIMESTAMP"  # Default name
          fi
          echo "final_test_name=$FINAL_NAME" >> $GITHUB_OUTPUT  # Export output

# =========================================================
# Job 2: Run JMeter tests per runner
# =========================================================
  run-jmeter:
    name: ${{ needs.set-test-name.outputs.final_test_name }} - Runner ${{ matrix.runner_index }}
    runs-on: ubuntu-latest
    needs: set-test-name

    strategy:
      fail-fast: false  # Continue other runners even if one fails
      matrix:
        runner_index: [1, 2, 3, 4]  # Parallel runner indices

    steps:
      # --------------------------------------
      # Step: Checkout repo
      # --------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4  # Get repo files

      # --------------------------------------
      # Step: Optional machine info
      # --------------------------------------
      - name: Print machine details
        if: ${{ github.event.inputs.print_machine_info == 'true' }}
        shell: bash
        run: |
          echo "===== Machine Info ====="
          echo "CPU cores: $(nproc)"  # Number of CPU cores
          echo "Memory: $(free -h)"   # RAM info
          echo "IP: $(curl -s ifconfig.me)"  # Public IP
          echo "Location info:"
          curl -s https://ipapi.co/json/  # Geolocation info
          echo "========================"

      # --------------------------------------
      # Step: Skip runners not selected
      # --------------------------------------
      - name: Skip unused runner jobs
        if: ${{ matrix.runner_index > fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          echo "Skipping runner ${{ matrix.runner_index }} (not selected)"
          exit 0

      # --------------------------------------
      # Step: Early JMX validation
      # --------------------------------------
      - name: Verify JMeter test plan exists (before install)
        shell: bash
        run: |
          if [ ! -f "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.test_plan_file }}" ]; then
            echo "‚ùå Test plan '${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.test_plan_file }}' not found!"
            exit 1
          fi
          echo "‚úÖ Found JMX file: ${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.test_plan_file }}"

      # --------------------------------------
      # Step: Install Java + JMeter + Plugins
      # --------------------------------------
      - name: Install Java & JMeter with Plugins
        shell: bash
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y -qq openjdk-17-jdk wget unzip
          wget -nv https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${{ env.JMETER_VERSION }}.zip
          unzip -q apache-jmeter-${{ env.JMETER_VERSION }}.zip
          JMETER_HOME=$PWD/apache-jmeter-${{ env.JMETER_VERSION }}
          export PATH=$PATH:$JMETER_HOME/bin

          # Install plugin manager
          wget -q https://jmeter-plugins.org/get/ -O $JMETER_HOME/lib/ext/jmeter-plugins-manager.jar
          java -cp $JMETER_HOME/lib/ext/jmeter-plugins-manager.jar org.jmeterplugins.repository.PluginManagerCMDInstaller
          # Install required plugins
          $JMETER_HOME/bin/PluginsManagerCMD.sh install jpgc-dummy,jpgc-casutg,jpgc-filterresults
          echo "‚úÖ Installed JMeter ${JMETER_VERSION} with plugins"

      # --------------------------------------
      # Step: Optional system monitoring
      # --------------------------------------
      - name: Start System Monitoring (optional)
        if: ${{ github.event.inputs.monitor_system == 'true' && matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          LOG_FILE="${{ env.REPORT_DIR }}/runner-${{ matrix.runner_index }}-system.log"
          echo "timestamp,cpu_user,cpu_system,cpu_idle,mem_used,mem_free" > $LOG_FILE
          monitor() {
            while true; do
              ts=$(date +"%Y-%m-%d %H:%M:%S")
              cpu=$(mpstat 1 1 | awk '/Average/ {print $3","$5","$12}')
              mem=$(free -m | awk '/Mem:/ {print $3","$4}')
              echo "$ts,$cpu,$mem" >> $LOG_FILE
              sleep 180
            done
          }
          monitor &
          echo $! > /tmp/monitor_pid.txt  # Save PID to stop later

      # --------------------------------------
      # Step: Run JMeter Test
      # --------------------------------------
      - name: Run JMeter Test
        id: run_test
        shell: bash
        run: |
          JMETER_HOME=$PWD/apache-jmeter-${{ env.JMETER_VERSION }}
          export PATH=$PATH:$JMETER_HOME/bin
          TEST_NAME="${{ needs.set-test-name.outputs.final_test_name }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RESULT_DIR="${{ env.REPORT_DIR }}/${TEST_NAME}-runner-${{ matrix.runner_index }}-$TIMESTAMP"
          mkdir -p "$RESULT_DIR"

          RESULTS_JTL="$RESULT_DIR/results.jtl"  # Main JTL file
          ERRORS_JTL="$RESULT_DIR/errors.jtl"   # Errors only

          echo "üèÉ Running JMeter test on Runner ${{ matrix.runner_index }}..."
          jmeter -n \
            -t "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.test_plan_file }}" \
            -l "$RESULTS_JTL" \
            -JerrorFile="$ERRORS_JTL" \
            -Jjmeter.save.saveservice.output_format=xml \
            -Jjmeter.save.saveservice.autoflush=true \
            -e -o "$RESULT_DIR/html-report"

          echo "result_dir=$RESULT_DIR" >> $GITHUB_OUTPUT
          echo "‚úÖ Runner ${{ matrix.runner_index }} test completed."

      # --------------------------------------
      # Step: Stop monitoring
      # --------------------------------------
      - name: Stop System Monitoring (optional)
        if: ${{ github.event.inputs.monitor_system == 'true' && matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          if [ -f /tmp/monitor_pid.txt ]; then
            kill $(cat /tmp/monitor_pid.txt) || true
            rm /tmp/monitor_pid.txt
          fi

      # --------------------------------------
      # Step: Package Runner Results
      # --------------------------------------
      - name: Package Runner Results
        if: always()
        shell: bash
        run: |
          ZIP_NAME="runner-${{ matrix.runner_index }}-results.zip"
          mkdir -p upload
          zip -r "upload/$ZIP_NAME" "${{ steps.run_test.outputs.result_dir }}"
          echo "üì¶ Packaged: upload/$ZIP_NAME"

      # --------------------------------------
      # Step: Upload Runner Artifact
      # --------------------------------------
      - name: Upload Runner Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-runner-${{ matrix.runner_index }}
          path: upload/*.zip
        continue-on-error: true

# =========================================================
# Job 3: Aggregate Results
# =========================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type != 'cleanup' }}  # Skip cleanup runs
    needs: [set-test-name, run-jmeter]
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download runner artifacts
      - name: Download all runner artifacts
        uses: actions/download-artifact@v4
        with:
          path: jmeter-results

      # Extract all ZIPs into combined-results
      - name: Extract all runner ZIPs
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in jmeter-results/**/*.zip; do
            [ -f "$zipfile" ] || continue
            foldername=$(basename "$zipfile" .zip)
            mkdir -p combined-results/"$foldername"
            unzip -qo "$zipfile" -d combined-results/"$foldername"
          done

      # Install Java + JMeter + plugins for aggregation
      - name: Install Java & JMeter with Plugins
        shell: bash
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y -qq openjdk-17-jdk wget unzip
          wget -nv https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${{ env.JMETER_VERSION }}.zip
          unzip -q apache-jmeter-${{ env.JMETER_VERSION }}.zip
          JMETER_HOME=$PWD/apache-jmeter-${{ env.JMETER_VERSION }}
          export PATH=$PATH:$JMETER_HOME/bin
          wget -q https://jmeter-plugins.org/get/ -O $JMETER_HOME/lib/ext/jmeter-plugins-manager.jar
          java -cp $JMETER_HOME/lib/ext/jmeter-plugins-manager.jar org.jmeterplugins.repository.PluginManagerCMDInstaller
          $JMETER_HOME/bin/PluginsManagerCMD.sh install jpgc-dummy,jpgc-casutg,jpgc-filterresults

      # Merge all JTL files (including errors)
      - name: Merge All JTL Files (including errors)
        shell: bash
        run: |
          MERGED_DIR=merged-results
          mkdir -p $MERGED_DIR
          MERGED_JTL=$MERGED_DIR/merged-results.jtl
          echo "üîÑ Merging all JTL files..."
          find combined-results -type f -name "*.jtl" -exec cat {} + > "$MERGED_JTL"
          echo "‚úÖ Merged JTL created at $MERGED_JTL"

      # Generate consolidated HTML report
      - name: Generate Consolidated JMeter HTML Report
        shell: bash
        run: |
          MERGED_DIR=merged-results
          MERGED_JTL=$MERGED_DIR/merged-results.jtl
          CONSOLIDATED_HTML=$MERGED_DIR/html-report
          echo "üìä Generating consolidated HTML report..."
          $JMETER_HOME/bin/jmeter -g "$MERGED_JTL" -o "$CONSOLIDATED_HTML" \
            -Jjmeter.save.saveservice.autoflush=true
          echo "‚úÖ Consolidated HTML report generated at $CONSOLIDATED_HTML"

      # Package and upload consolidated artifacts
      - name: Package and Upload Consolidated Artifacts
        if: always()
        shell: bash
        run: |
          mkdir -p final-upload
          cp -r merged-results final-upload/
          zip -r consolidated-results.zip final-upload/
          echo "üì¶ Packaged consolidated-results.zip"
      - name: Upload Consolidated Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-jmeter-results
          path: consolidated-results.zip
