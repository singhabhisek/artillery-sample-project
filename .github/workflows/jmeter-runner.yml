# =========================================================
# GitHub Actions workflow for JMeter Load Tests
# =========================================================
# Features:
# - Multiple parallel runners (1–4)
# - Each runner generates main JTL, errors JTL, and HTML report
# - Plugin support: dummy sampler, custom thread groups, filter results
# - Optional system monitoring
# - Aggregation: merge all JTLs and generate consolidated HTML
# - Artifacts: per-runner ZIP + consolidated ZIP
# - Cleanup job: deletes old artifacts/reports based on cleanup_days
# - Sanitized test/run names to avoid special character issues
# =========================================================

name: "JMeter Load Test (Multi-Runner)"

run-name: >
  JMeter Workflow: ${{ github.event.inputs.test_name }}

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Choose test type (e.g., load/cleanup)"
        required: true
        type: choice
        options:
          - load
          - cleanup
      runners_to_use:
        description: "Number of parallel runners to use (1–4)"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
      test_plan_file:
        description: "JMeter Test Plan (.jmx file)"
        required: true
        default: "High_TPS_Runner.jmx"
      test_name:
        description: "Optional test name; if blank, YYYYMMDD will be used"
        required: false
        default: ""
      run_name:
        description: "Optional custom run name; overrides test_name if provided"
        required: false
        default: ""
      monitor_system:
        description: "Monitor runner CPU/memory usage during test? true/false"
        required: false
        type: choice
        options:
          - "true"
          - "false"
        default: "false"
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"
      print_machine_info:
        description: "Set true to print machine details"
        required: false
        type: choice
        options:
          - "true"
          - "false"

# =========================================================
# Environment variables
# =========================================================
env:
  JMETER_VERSION: "5.6.3"             # JMeter version to install
  SCRIPTS_DIR: "./scripts"            # Directory where .jmx test plans exist
  REPORT_DIR: "./jmeter-results"      # Base directory to store runner results

# =========================================================
# Job 1: Set final sanitized test/run name
# =========================================================
jobs:
  set-test-name:
    runs-on: ubuntu-latest
    outputs:
      final_test_name: ${{ steps.determine.outputs.final_test_name }}

    steps:
      - id: determine
        run: |
          # Get current date fallback
          TIMESTAMP=$(date +%Y%m%d)

          # Determine base name: run_name > test_name > fallback
          if [ -n "${{ github.event.inputs.test_name }}" ]; then
            BASE_NAME="Jmeter_Test_${{ github.event.inputs.test_name }}"
          else
            BASE_NAME="test_$TIMESTAMP"
          fi

          # Append optional run_name if provided
          if [ -n "${{ github.event.inputs.run_name }}" ]; then
            FINAL_NAME="${BASE_NAME}_run_${{ github.event.inputs.run_name }}"
          else
            FINAL_NAME="$BASE_NAME"
          fi

          # Sanitize name: replace all non-alphanumeric characters with underscore
          SAFE_NAME=$(echo "$FINAL_NAME" | sed 's/[^a-zA-Z0-9_-]/_/g')

          # Export final sanitized name for downstream jobs
          echo "final_test_name=$SAFE_NAME" >> $GITHUB_OUTPUT
          echo "✅ Final sanitized test/run name: $SAFE_NAME"

# =========================================================
# Job 2: Run JMeter tests per runner
# =========================================================
  run-jmeter:
    name: ${{ needs.set-test-name.outputs.final_test_name }} - Runner ${{ matrix.runner_index }}
    runs-on: ubuntu-latest
    needs: set-test-name
    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Optional machine info
      - name: Print machine details
        if: ${{ github.event.inputs.print_machine_info == 'true' }}
        shell: bash
        run: |
          echo "===== Machine Info ====="
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "IP: $(curl -s ifconfig.me)"
          echo "Location info:"
          curl -s https://ipapi.co/json/
          echo "========================"

      # Skip runners not selected
      - name: Skip unused runner jobs
        if: ${{ matrix.runner_index > fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          echo "Skipping runner ${{ matrix.runner_index }} (not selected)"
          exit 0

      # Early JMX validation
      - name: Verify JMeter test plan exists
        shell: bash
        run: |
          if [ ! -f "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.test_plan_file }}" ]; then
            echo "❌ Test plan not found: ${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.test_plan_file }}"
            exit 1
          fi
          echo "✅ Found JMX file: ${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.test_plan_file }}"

      # Install Java + JMeter + Plugins
      - name: Install Java & JMeter with Plugins
        shell: bash
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y -qq openjdk-17-jdk wget unzip
          wget -nv https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${{ env.JMETER_VERSION }}.zip
          unzip -q apache-jmeter-${{ env.JMETER_VERSION }}.zip
          JMETER_HOME=$PWD/apache-jmeter-${{ env.JMETER_VERSION }}

          # Fix missing cmdrunner jar required by Plugins Manager
          wget -nv https://jmeter-plugins.org/download/tools/cmdrunner/cmdrunner-2.3.jar -O $JMETER_HOME/lib/cmdrunner-2.3.jar

          export PATH=$PATH:$JMETER_HOME/bin

          # Install plugin manager
          wget -q https://jmeter-plugins.org/get/ -O $JMETER_HOME/lib/ext/jmeter-plugins-manager.jar
          java -cp $JMETER_HOME/lib/ext/jmeter-plugins-manager.jar org.jmeterplugins.repository.PluginManagerCMDInstaller

          # Install required plugins
          $JMETER_HOME/bin/PluginsManagerCMD.sh install jpgc-dummy,jpgc-casutg,jpgc-filterresults
          echo "✅ Installed JMeter ${JMETER_VERSION} with plugins"

      # Optional system monitoring
      - name: Start System Monitoring (optional)
        if: ${{ github.event.inputs.monitor_system == 'true' }}
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          LOG_FILE="${{ env.REPORT_DIR }}/runner-${{ matrix.runner_index }}-system.log"
          echo "timestamp,cpu_user,cpu_system,cpu_idle,mem_used,mem_free" > $LOG_FILE
          monitor() {
            while true; do
              ts=$(date +"%Y-%m-%d %H:%M:%S")
              cpu=$(mpstat 1 1 | awk '/Average/ {print $3","$5","$12}')
              mem=$(free -m | awk '/Mem:/ {print $3","$4}')
              echo "$ts,$cpu,$mem" >> $LOG_FILE
              sleep 180
            done
          }
          monitor &
          echo $! > /tmp/monitor_pid.txt

      # Run JMeter test
      - name: Run JMeter Test
        id: run_test
        shell: bash
        run: |
          JMETER_HOME=$PWD/apache-jmeter-${{ env.JMETER_VERSION }}
          export PATH=$PATH:$JMETER_HOME/bin

          TEST_NAME="${{ needs.set-test-name.outputs.final_test_name }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RESULT_DIR="${{ env.REPORT_DIR }}/${TEST_NAME}-runner-${{ matrix.runner_index }}-$TIMESTAMP"
          mkdir -p "$RESULT_DIR"

          RESULTS_JTL="$RESULT_DIR/results.jtl"
          ERRORS_JTL="$RESULT_DIR/errors.jtl"

          echo "🏃 Running JMeter test on Runner ${{ matrix.runner_index }}..."
          jmeter -n \
            -t "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.test_plan_file }}" \
            -l "$RESULTS_JTL" \
            -JerrorFile="$ERRORS_JTL" \
            -Jjmeter.save.saveservice.output_format=xml \
            -Jjmeter.save.saveservice.autoflush=true \
            -e -o "$RESULT_DIR/html-report"

          echo "result_dir=$RESULT_DIR" >> $GITHUB_OUTPUT
          echo "✅ Runner ${{ matrix.runner_index }} test completed."

      # Stop system monitoring
      - name: Stop System Monitoring (optional)
        if: ${{ github.event.inputs.monitor_system == 'true' }}
        shell: bash
        run: |
          if [ -f /tmp/monitor_pid.txt ]; then
            kill $(cat /tmp/monitor_pid.txt) || true
            rm /tmp/monitor_pid.txt
          fi

      # Package runner results
      - name: Package Runner Results
        if: always()
        shell: bash
        run: |
          ZIP_NAME="runner-${{ matrix.runner_index }}-results.zip"
          mkdir -p upload
          zip -r "upload/$ZIP_NAME" "${{ steps.run_test.outputs.result_dir }}"
          echo "📦 Packaged: upload/$ZIP_NAME"

      # Upload runner artifact
      - name: Upload Runner Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-runner-${{ matrix.runner_index }}
          path: upload/*.zip
        continue-on-error: true

# =========================================================
# Job 3: Aggregate Results
# =========================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type != 'cleanup' }}
    needs: [set-test-name, run-jmeter]
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download all runner artifacts
      - name: Download all runner artifacts
        uses: actions/download-artifact@v4
        with:
          path: jmeter-results

      # Extract all runner ZIPs
      - name: Extract all runner ZIPs
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in jmeter-results/**/*.zip; do
            [ -f "$zipfile" ] || continue
            foldername=$(basename "$zipfile" .zip)
            mkdir -p combined-results/"$foldername"
            unzip -qo "$zipfile" -d combined-results/"$foldername"
          done

      # Install Java + JMeter + Plugins for consolidation
      - name: Install Java & JMeter for consolidation
        shell: bash
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y -qq openjdk-17-jdk wget unzip
          wget -nv https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${{ env.JMETER_VERSION }}.zip
          unzip -q apache-jmeter-${{ env.JMETER_VERSION }}.zip
          JMETER_HOME=$PWD/apache-jmeter-${{ env.JMETER_VERSION }}
          export PATH=$PATH:$JMETER_HOME/bin
          wget -nv https://jmeter-plugins.org/download/tools/cmdrunner/cmdrunner-2.3.jar -O $JMETER_HOME/lib/cmdrunner-2.3.jar
          wget -q https://jmeter-plugins.org/get/ -O $JMETER_HOME/lib/ext/jmeter-plugins-manager.jar
          java -cp $JMETER_HOME/lib/ext/jmeter-plugins-manager.jar org.jmeterplugins.repository.PluginManagerCMDInstaller
          $JMETER_HOME/bin/PluginsManagerCMD.sh install jpgc-dummy,jpgc-casutg,jpgc-filterresults

      # Merge all JTLs & generate consolidated HTML
      - name: Generate Consolidated Results
        shell: bash
        run: |
          mkdir -p consolidated
          ALL_JTLS=$(find combined-results -type f -name "results.jtl" | tr '\n' ' ')
          ALL_ERRORS=$(find combined-results -type f -name "errors.jtl" | tr '\n' ' ')

          if [ -z "$ALL_JTLS" ]; then
            echo "⚠️ No JTL files found, skipping consolidation"
            exit 0
          fi

          # Merge main JTLs
          MERGED_JTL="consolidated/all_results.jtl"
          head -n 1 $(echo $ALL_JTLS | awk '{print $1}') > $MERGED_JTL
          for file in $ALL_JTLS; do
            tail -n +2 "$file" >> $MERGED_JTL
          done

          # Merge error JTLs
          MERGED_ERRORS="consolidated/all_errors.jtl"
          if [ -n "$ALL_ERRORS" ]; then
            head -n 1 $(echo $ALL_ERRORS | awk '{print $1}') > $MERGED_ERRORS
            for file in $ALL_ERRORS; do
              tail -n +2 "$file" >> $MERGED_ERRORS
            done
          fi

          # Generate consolidated HTML
          JMETER_HOME=$PWD/apache-jmeter-${{ env.JMETER_VERSION }}
          jmeter -g $MERGED_JTL -o consolidated/html-report
          echo "✅ Consolidated HTML report generated at consolidated/html-report"

      # Package consolidated results
      - name: Package Consolidated Artifacts
        if: always()
        shell: bash
        run: |
          mkdir -p final-upload
          cp jmeter-results/**/*.zip final-upload/ || true
          cp -r consolidated final-upload/consolidated || true
          zip -r "consolidated-results.zip" final-upload/
          echo "📦 Consolidated ZIP: consolidated-results.zip"

      # Upload consolidated artifact
      - name: Upload Consolidated Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-jmeter-results
          path: consolidated-results.zip

# =========================================================
# Job 4: Cleanup Old Artifacts/Reports
# =========================================================
  cleanup-artifacts:
    if: ${{ github.event.inputs.test_type == 'cleanup' || github.event.inputs.test_type == 'load' }}
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old runner results
        shell: bash
        run: |
          echo "🧹 Cleaning runner results older than ${{ github.event.inputs.cleanup_days }} days..."
          find ${{ env.REPORT_DIR }} -maxdepth 1 -type d -name "*-runner-*" -mtime +${{ github.event.inputs.cleanup_days }} -exec rm -rf {} +
          echo "✅ Old runner directories deleted."

      - name: Cleanup old consolidated results
        shell: bash
        run: |
          echo "🧹 Cleaning consolidated directories older than ${{ github.event.inputs.cleanup_days }} days..."
          find consolidated -maxdepth 1 -type d -mtime +${{ github.event.inputs.cleanup_days }} -exec rm -rf {} + || true
          echo "✅ Old consolidated directories deleted."
